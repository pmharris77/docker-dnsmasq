name: Update to latest Dnsmasq version

on:
  workflow_dispatch: # For manually running on GitHub webpage
  schedule:
    - cron: '0 10 * * 0'  # every Sunday at 10am
    # - cron: '*/30 * * * *'  # every 30 min

jobs:
  check-and-update:
    name: Check if Dnsmasq version needs updating and update (if necessary)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get the latest available version of Dnsmasq
        run: |
          git clone git://thekelleys.org.uk/dnsmasq.git
          cd dnsmasq
          NEW_VERSION=$(git describe --abbrev=0 --exclude '*rc*' --exclude '*test*')
          # Trim leading 'v' in semantic version
          NEW_VERSION=${NEW_VERSION:1}
          echo "NEW_VERSION = $NEW_VERSION" # For debug
          echo "NEW_VERSION=$(echo $NEW_VERSION)" >> $GITHUB_ENV

      - name: Get current used version of Dnsmasq
        run: |
          CURRENT_VERSION=$(cat .dnsmasq-version)
          echo "CURRENT_VERSION = $CURRENT_VERSION" # For debug
          echo "CURRENT_VERSION=$(echo $CURRENT_VERSION)" >> $GITHUB_ENV

      - name: Determine if update required
        run: |
          if [[ ${{env.NEW_VERSION}} > ${{env.CURRENT_VERSION}} ]]
          then
              echo "Newer version of dnsmasq available, proceeding..."
              echo "NEWER_VERSION_AVAILABLE=true" >> $GITHUB_ENV
          else
              echo "Already using latest dnsmasq, subsequent steps will be skipped..."
              echo "NEWER_VERSION_AVAILABLE=false" >> $GITHUB_ENV
          fi

      # ========== THESE STEPS ONLY RUN IF A NEWER VERSION OF DNSMASQ WAS FOUND ==========
        
      - name: List existing update PRs matching new version (if any)
        if:   env.NEWER_VERSION_AVAILABLE == 'true'
        uses: buildsville/list-pull-requests@v1.0.1
        id:   list_prs # Used for retrieving output in other steps
        with:
          token:     ${{secrets.GITHUB_TOKEN}}
          labels:    '["${{ env.NEW_VERSION }}"]'
          skip_hour: '0'

      - name: Determine if PR already exists for newer version
        if:   env.NEWER_VERSION_AVAILABLE == 'true'
        run: |
          if [ ! -z "${{ steps.list_prs.outputs.pulls }}" ]
          then
              echo "Skipping code update as one or more PRs already exist for version ${{env.NEW_VERSION}}: ${{ steps.list_prs.outputs.pulls }}"
              echo "UPDATE_REQUIRED=false" >> $GITHUB_ENV
          else
              echo "No PR already exists for version ${{env.NEW_VERSION}}. Proceeding with code update..."
              echo "UPDATE_REQUIRED=true" >> $GITHUB_ENV
          fi

      # ========== THESE STEPS ONLY RUN IF A NEWER VERSION OF DNSMASQ WAS FOUND AND NO EXIST PR FOR IT ==========

      - name: Update Dnsmasq config example
        if:   env.UPDATE_REQUIRED == 'true'
        run: |
          cp dnsmasq/dnsmasq.conf.example ../dnsmasq.conf.example
          rm -fr dnsmasq

      - name: Update Dnsmasq version
        if:   env.UPDATE_REQUIRED == 'true'
        run: |
          for f in .dnsmasq-version README.md Dockerfile docker-compose.yml; do
            sed -i "s/${{env.CURRENT_VERSION}}/${{env.NEW_VERSION}}/g" "$f"
          done

      - name: Send pull request to update to new version
        if:   env.UPDATE_REQUIRED == 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update to Dnsmasq ${{ env.NEW_VERSION }}
          title:          Update to Dnsmasq ${{ env.NEW_VERSION }}
          labels:         ${{ env.NEW_VERSION }}
          assignees:      pmharris77
          reviewers:      pmharris77
          delete-branch:  true
