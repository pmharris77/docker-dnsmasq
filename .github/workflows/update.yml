name: Update to latest Dnsmasq version

on:
  workflow_dispatch: # For manually running on GitHub webpage
  schedule:
    - cron: '0 10 * * 0'  # every Sunday at 10am
    # - cron: '*/30 * * * *'  # every 30 min

jobs:
  check-version:
    name: Check if Dnsmasq version needs updating
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get the latest available version of Dnsmasq
        run: |
          git clone git://thekelleys.org.uk/dnsmasq.git
          cd dnsmasq
          NEW_VERSION=$(git describe --abbrev=0 --exclude '*rc*' --exclude '*test*')
          # Trim leading 'v' in semantic version
          NEW_VERSION=${NEW_VERSION:1}
          echo "NEW_VERSION = $NEW_VERSION" # For debug
          echo "NEW_VERSION=$(echo $NEW_VERSION)" >> $GITHUB_ENV

      - name: Get current used version of Dnsmasq
        run: |
          CURRENT_VERSION=$(cat .dnsmasq-version)
          echo "CURRENT_VERSION = $CURRENT_VERSION" # For debug
          echo "CURRENT_VERSION=$(echo $CURRENT_VERSION)" >> $GITHUB_ENV

      - name: Determine if update required
        run: |
          if ((${{env.NEW_VERSION}} > ${{env.CURRENT_VERSION}}))
          then
              echo "Update required"
          else
              echo "Update not required"
          fi

      - name: List existing update PRs matching this version
        uses: buildsville/list-pull-requests@v1.0.1
        id:   list_prs # Used for retrieving output in other steps
        with:
          token:     ${{secrets.GITHUB_TOKEN}}
          labels:    '["${{ env.NEW_VERSION }}"]'
          skip_hour: '0'

      - name: Fail workflow if there is already a PR for this version
        run: |
          if [ ! -z "${{ steps.list_prs.outputs.pulls }}" ]
          then
              echo "FAIL: The following PRs already exist for version ${{env.NEW_VERSION}}: ${{ steps.list_prs.outputs.pulls }}"
              exit 1
          fi

  # update:
  #   if: 
  #   name: Update source code and publish PR
  #   runs-on: ubuntu-latest
  #   needs: [check-version]
  #   steps:
  #   - name: Update Dnsmasq config example
  #     run: |
  #       cp dnsmasq/dnsmasq.conf.example ../dnsmasq.conf.example
  #       rm -fr dnsmasq

  #   - name: Update Dnsmasq version
  #     run: |
  #       current_version=$(cat .dnsmasq-version)
  #       for f in .dnsmasq-version README.md Dockerfile docker-compose.yml; do
  #         sed -i "s/${current_version}/${{env.NEW_VERSION}}/g" "$f"
  #       done

  #   - name: Send pull request to update to new version
  #     uses: peter-evans/create-pull-request@v3
  #     with:
  #       commit-message: Update to Dnsmasq ${{ env.NEW_VERSION }}
  #       title:          Update to Dnsmasq ${{ env.NEW_VERSION }}
  #       labels:         ${{ env.NEW_VERSION }}
  #       assignees:      pmharris77
  #       reviewers:      pmharris77
  #       delete-branch:  true
